apply plugin: 'com.android.application'

//start----------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------
apply plugin: 'patch-gradle-plugin'
//end------------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "zeus.test"
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    /**
     * --PLUG-resoure-proguard 表示资源混淆，去掉则资源不混淆
     * --PLUG-resoure-id  表示资源id命名（Package ID），后面参数表示对应资源id，去掉则为系统应用默认id'0x7f'
     */
    //去掉为了让demo不需要替换aapt就可以运行
    //    aaptOptions.additionalParameters '--PLUG-resoure-proguard', '--PLUG-resoure-id', '0x7f'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':ZeusPlugin')
    compile 'com.android.support:appcompat-v7:23.1.1'
}


//start----------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------
//如果enable为true则表明打出的包会在每个类的构造函数中添加如下代码:if (Boolean.FALSE.booleanValue())System.out.println(Predicate.class);
patchPlugin{
    enable = true
}
//end------------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------

//start----------插件相关的，用来生成sdk-jar的------------------
Jar buildJar=task(dependsOn: ['assembleDebug'], "buildJar",type: Jar)
buildJar.appendix = "master"
buildJar.baseName = "zeus"
buildJar.version = "1.0.0"
buildJar.classifier = "release"
//后缀名
buildJar.extension = "jar"
//最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
buildJar.archiveName = "plugin_sdk.jar"

//需打包的资源所在的路径集
def dir=fileTree(project.findProject(':app').buildDir.absolutePath + "/intermediates/exploded-aar/")
dir.each {
    if(it.name.endsWith("jar")){
        buildJar.from project.zipTree(it)
    }
}
////    //添加进来的都是不打包到sdk中的，去除路径集下部分的资源
//    buildJar.exclude "**/BuildConfig.class"
//    buildJar.exclude "**/BuildConfig\$*.class"
////    //以下是资源id是否打包到sdk中
//    buildJar.exclude "**/R.class"
//    buildJar.exclude "**/R\$*.class"
////
////    //只导入资源路径集下的部分资源,想添加什么类打包到sdk中就修改此处，默认全部打包
buildJar.include "**/*.class"

//    //注: exclude include 支持可变长参数

//end----------插件相关的，用来生成sdk-jar的------------------